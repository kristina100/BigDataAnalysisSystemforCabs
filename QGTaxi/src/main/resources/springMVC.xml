<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 使用注解开发 SpringMVC 的流程如下 -->

    <!-- ① 自动扫描包，让指定包下的注解生效，由 IOC 容器统一管理 -->
    <context:component-scan base-package="com.taxi.controller"/>
    <context:component-scan base-package="com.taxi.po"/>
    <!--<context:component-scan base-package="com.qg.interceptor"/>-->
    <context:component-scan base-package="com.taxi.exception"/>
	<!--<context:component-scan base-package="com.taxi.aop"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!-- ② 让 SpringMVC 不处理静态资源，如 .css .js .html 等 -->
    <mvc:default-servlet-handler/>

    <!-- ③ 支持 mvc 注解驱动 -->
    <!-- 相当于自动完成 HandlerMapping 和 HandlerAdapter 的注入
         使得要用到的注解 @RequestMapping 生效 -->
    <mvc:annotation-driven/>

    <!-- 视图解析器 DispatcherServlet 给他的 ModelAndView -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/"/>
        <!-- 后缀 -->
        <property name="suffix" value=".html"/>
    </bean>

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/plain;charset=UTF-8</value>
                        <value>application/xml;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为 200MB -->
        <property name="maxUploadSize">
            <value>209715200</value>
        </property>
    </bean>

    <!--拦截器-->
    <!--<mvc:interceptors>
        &lt;!&ndash; 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 &ndash;&gt;
        &lt;!&ndash; <bean class="com.bybo.aca.web.interceptor.Login"/> &ndash;&gt;
        <mvc:interceptor>
             &lt;!&ndash;进行拦截：/**表示拦截所有controller&ndash;&gt;
            <mvc:mapping path="/update/**" />
            <mvc:mapping path="/token" />
            <mvc:mapping path="/u/**" />
            <mvc:mapping path="/project/u/**" />
            <mvc:mapping path="/resource/u/**" />
            &lt;!&ndash; 不进行拦截 &ndash;&gt;
            <mvc:exclude-mapping path="/user/login" />
            <bean class="com.qg.interceptor.JwtInterceptor" />
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.qg.interceptor.SqlInjectInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->

</beans>